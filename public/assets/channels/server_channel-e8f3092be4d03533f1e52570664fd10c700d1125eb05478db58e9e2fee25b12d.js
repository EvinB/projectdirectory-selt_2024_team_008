!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ActionCable={})}(this,function(e){"use strict";function t(e){if("function"==typeof e&&(e=e()),e&&!/^wss?:/i.test(e)){const t=document.createElement("a");return t.href=e,t.href=t.href,t.protocol=t.protocol.replace("http","ws"),t.href}return e}function n(e=s("url")||l.default_mount_path){return new y(e)}function s(e){const t=document.head.querySelector(`meta[name='action-cable-${e}']`);if(t)return t.getAttribute("content")}var i={logger:self.console,WebSocket:self.WebSocket},o={log(...e){this.enabled&&(e.push(Date.now()),i.logger.log("[ActionCable]",...e))}};const r=()=>(new Date).getTime(),c=e=>(r()-e)/1e3;class a{constructor(e){this.visibilityDidChange=this.visibilityDidChange.bind(this),this.connection=e,this.reconnectAttempts=0}start(){this.isRunning()||(this.startedAt=r(),delete this.stoppedAt,this.startPolling(),addEventListener("visibilitychange",this.visibilityDidChange),o.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`))}stop(){this.isRunning()&&(this.stoppedAt=r(),this.stopPolling(),removeEventListener("visibilitychange",this.visibilityDidChange),o.log("ConnectionMonitor stopped"))}isRunning(){return this.startedAt&&!this.stoppedAt}recordPing(){this.pingedAt=r()}recordConnect(){this.reconnectAttempts=0,this.recordPing(),delete this.disconnectedAt,o.log("ConnectionMonitor recorded connect")}recordDisconnect(){this.disconnectedAt=r(),o.log("ConnectionMonitor recorded disconnect")}startPolling(){this.stopPolling(),this.poll()}stopPolling(){clearTimeout(this.pollTimeout)}poll(){this.pollTimeout=setTimeout(()=>{this.reconnectIfStale(),this.poll()},this.getPollInterval())}getPollInterval(){const{staleThreshold:e,reconnectionBackoffRate:t}=this.constructor;return 1e3*e*Math.pow(1+t,Math.min(this.reconnectAttempts,10))*(1+(0===this.reconnectAttempts?1:t)*Math.random())}reconnectIfStale(){this.connectionIsStale()&&(o.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${c(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`),this.reconnectAttempts++,this.disconnectedRecently()?o.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${c(this.disconnectedAt)} s`):(o.log("ConnectionMonitor reopening"),this.connection.reopen()))}get refreshedAt(){return this.pingedAt?this.pingedAt:this.startedAt}connectionIsStale(){return c(this.refreshedAt)>this.constructor.staleThreshold}disconnectedRecently(){return this.disconnectedAt&&c(this.disconnectedAt)<this.constructor.staleThreshold}visibilityDidChange(){"visible"===document.visibilityState&&setTimeout(()=>{!this.connectionIsStale()&&this.connection.isOpen()||(o.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`),this.connection.reopen())},200)}}a.staleThreshold=6,a.reconnectionBackoffRate=.15;var l={message_types:{welcome:"welcome",disconnect:"disconnect",ping:"ping",confirmation:"confirm_subscription",rejection:"reject_subscription"},disconnect_reasons:{unauthorized:"unauthorized",invalid_request:"invalid_request",server_restart:"server_restart"},default_mount_path:"/cable",protocols:["actioncable-v1-json","actioncable-unsupported"]};const{message_types:u,protocols:d}=l,h=d.slice(0,d.length-1),p=[].indexOf;class g{constructor(e){this.open=this.open.bind(this),this.consumer=e,this.subscriptions=this.consumer.subscriptions,this.monitor=new a(this),this.disconnected=!0}send(e){return!!this.isOpen()&&(this.webSocket.send(JSON.stringify(e)),!0)}open(){return this.isActive()?(o.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`),!1):(o.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${d}`),this.webSocket&&this.uninstallEventHandlers(),this.webSocket=new i.WebSocket(this.consumer.url,d),this.installEventHandlers(),this.monitor.start(),!0)}close({allowReconnect:e}={allowReconnect:!0}){if(e||this.monitor.stop(),this.isOpen())return this.webSocket.close()}reopen(){if(o.log(`Reopening WebSocket, current state is ${this.getState()}`),!this.isActive())return this.open();try{return this.close()}catch(e){o.log("Failed to reopen WebSocket",e)}finally{o.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`),setTimeout(this.open,this.constructor.reopenDelay)}}getProtocol(){if(this.webSocket)return this.webSocket.protocol}isOpen(){return this.isState("open")}isActive(){return this.isState("open","connecting")}isProtocolSupported(){return p.call(h,this.getProtocol())>=0}isState(...e){return p.call(e,this.getState())>=0}getState(){if(this.webSocket)for(let e in i.WebSocket)if(i.WebSocket[e]===this.webSocket.readyState)return e.toLowerCase();return null}installEventHandlers(){for(let e in this.events){const t=this.events[e].bind(this);this.webSocket[`on${e}`]=t}}uninstallEventHandlers(){for(let e in this.events)this.webSocket[`on${e}`]=function(){}}}g.reopenDelay=500,g.prototype.events={message(e){if(!this.isProtocolSupported())return;const{identifier:t,message:n,reason:s,reconnect:i,type:r}=JSON.parse(e.data);switch(r){case u.welcome:return this.monitor.recordConnect(),this.subscriptions.reload();case u.disconnect:return o.log(`Disconnecting. Reason: ${s}`),this.close({allowReconnect:i});case u.ping:return this.monitor.recordPing();case u.confirmation:return this.subscriptions.confirmSubscription(t),this.subscriptions.notify(t,"connected");case u.rejection:return this.subscriptions.reject(t);default:return this.subscriptions.notify(t,"received",n)}},open(){if(o.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`),this.disconnected=!1,!this.isProtocolSupported())return o.log("Protocol is unsupported. Stopping monitor and disconnecting."),this.close({allowReconnect:!1})},close(e){if(o.log("WebSocket onclose event"),!this.disconnected)return this.disconnected=!0,this.monitor.recordDisconnect(),this.subscriptions.notifyAll("disconnected",{willAttemptReconnect:this.monitor.isRunning()})},error(){o.log("WebSocket onerror event")}};const m=function(e,t){if(null!=t)for(let n in t){const s=t[n];e[n]=s}return e};class b{constructor(e,t={},n){this.consumer=e,this.identifier=JSON.stringify(t),m(this,n)}perform(e,t={}){return t.action=e,this.send(t)}send(e){return this.consumer.send({command:"message",identifier:this.identifier,data:JSON.stringify(e)})}unsubscribe(){return this.consumer.subscriptions.remove(this)}}class f{constructor(e){this.subscriptions=e,this.pendingSubscriptions=[]}guarantee(e){-1==this.pendingSubscriptions.indexOf(e)?(o.log(`SubscriptionGuarantor guaranteeing ${e.identifier}`),this.pendingSubscriptions.push(e)):o.log(`SubscriptionGuarantor already guaranteeing ${e.identifier}`),this.startGuaranteeing()}forget(e){o.log(`SubscriptionGuarantor forgetting ${e.identifier}`),this.pendingSubscriptions=this.pendingSubscriptions.filter(t=>t!==e)}startGuaranteeing(){this.stopGuaranteeing(),this.retrySubscribing()}stopGuaranteeing(){clearTimeout(this.retryTimeout)}retrySubscribing(){this.retryTimeout=setTimeout(()=>{this.subscriptions&&"function"==typeof this.subscriptions.subscribe&&this.pendingSubscriptions.map(e=>{o.log(`SubscriptionGuarantor resubscribing ${e.identifier}`),this.subscriptions.subscribe(e)})},500)}}class S{constructor(e){this.consumer=e,this.guarantor=new f(this),this.subscriptions=[]}create(e,t){const n="object"==typeof e?e:{channel:e},s=new b(this.consumer,n,t);return this.add(s)}add(e){return this.subscriptions.push(e),this.consumer.ensureActiveConnection(),this.notify(e,"initialized"),this.subscribe(e),e}remove(e){return this.forget(e),this.findAll(e.identifier).length||this.sendCommand(e,"unsubscribe"),e}reject(e){return this.findAll(e).map(e=>(this.forget(e),this.notify(e,"rejected"),e))}forget(e){return this.guarantor.forget(e),this.subscriptions=this.subscriptions.filter(t=>t!==e),e}findAll(e){return this.subscriptions.filter(t=>t.identifier===e)}reload(){return this.subscriptions.map(e=>this.subscribe(e))}notifyAll(e,...t){return this.subscriptions.map(n=>this.notify(n,e,...t))}notify(e,t,...n){let s;return(s="string"==typeof e?this.findAll(e):[e]).map(e=>"function"==typeof e[t]?e[t](...n):undefined)}subscribe(e){this.sendCommand(e,"subscribe")&&this.guarantor.guarantee(e)}confirmSubscription(e){o.log(`Subscription confirmed ${e}`),this.findAll(e).map(e=>this.guarantor.forget(e))}sendCommand(e,t){const{identifier:n}=e;return this.consumer.send({command:t,identifier:n})}}class y{constructor(e){this._url=e,this.subscriptions=new S(this),this.connection=new g(this)}get url(){return t(this._url)}send(e){return this.connection.send(e)}connect(){return this.connection.open()}disconnect(){return this.connection.close({allowReconnect:!1})}ensureActiveConnection(){if(!this.connection.isActive())return this.connection.open()}}e.Connection=g,e.ConnectionMonitor=a,e.Consumer=y,e.INTERNAL=l,e.Subscription=b,e.SubscriptionGuarantor=f,e.Subscriptions=S,e.adapters=i,e.createConsumer=n,e.createWebSocketURL=t,e.getConfig=s,e.logger=o,Object.defineProperty(e,"__esModule",{value:!0})});const createConsumer=ActionCable.createConsumer;window.App||(window.App={}),App.cable=createConsumer(),console.log("App.cable initialized:",App.cable);let chatSubscription=null;const ensureMembership=async e=>{try{const n=document.querySelector("meta[name='csrf-token']").getAttribute("content"),s=await fetch(`/servers/${e}/ensure_membership.json`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-Token":n}});if(!s.ok)throw new Error(`Failed to ensure membership: ${s.statusText}`);const i=await s.json();"Membership ensured"===i.message?console.log("Membership already exists."):console.log("Membership ensured:",i)}catch(t){console.error("Error ensuring membership:",t)}},initializeChannel=async()=>{const e=document.getElementById("server-id"),t=document.getElementById("messages"),n=document.getElementById("message-form");if(!e||!t)return void console.warn("Required elements not found. Skipping channel initialization.");const s=e.dataset.serverId;await ensureMembership(s),chatSubscription?console.warn("Already subscribed to ServerChannel. Skipping subscription."):(chatSubscription=App.cable.subscriptions.create({channel:"ServerChannel",server_id:s},{connected(){console.log(`Connected to ServerChannel for server_${s}`)},disconnected(){console.log(`Disconnected from ServerChannel for server_${s}`),chatSubscription=null},received(e){handleReceivedData(e,t)}}),n?setupMessageForm(n,chatSubscription):console.warn("Message form not found. Skipping message submission setup."))},handleReceivedData=(e,t)=>{if("message"===e.type){document.querySelector(`[data-message-id='${e.message.id}']`)||appendMessage(t,e.message)}else if("system"===e.type){document.querySelector(`[data-system-message='${e.message}']`)||appendSystemMessage(t,e.message)}else"status"===e.type&&e.user_id?updateUserStatus(e):console.warn("Unexpected data received:",JSON.stringify(e,null,2))},appendMessage=(e,t)=>{e&&(e.insertAdjacentHTML("beforeend",t),scrollToBottom(e))},appendSystemMessage=(e,t)=>{e&&(e.insertAdjacentHTML("beforeend",`<div data-system-message="${t}"><em>${t}</em></div>`),scrollToBottom(e))},scrollToBottom=e=>{e.scrollTop=e.scrollHeight},setupMessageForm=(e,t)=>{const n=document.querySelector("meta[name='csrf-token']").getAttribute("content"),s=document.getElementById("message-input");s?e.addEventListener("submit",e=>{e.preventDefault();const i=s.value.trim();""!==i&&(t.perform("send_message",{message:i,authenticity_token:n}),s.value="")}):console.warn("Message input field not found.")},updateUserStatus=e=>{const t=document.querySelector(`.user[data-user-id='${e.user_id}']`);t?(console.log(`Updating user ${e.user_id} status to ${e.status}`),t.classList.remove("online","offline"),t.classList.add(e.status)):console.warn(`User element with ID ${e.user_id} not found.`)};document.addEventListener("turbolinks:before-visit",()=>{chatSubscription&&(chatSubscription.unsubscribe(),chatSubscription=null,console.log("Unsubscribed from ServerChannel before navigation."))}),document.addEventListener("DOMContentLoaded",initializeChannel),document.addEventListener("turbolinks:load",initializeChannel);